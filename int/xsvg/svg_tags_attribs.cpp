#include "xsvg_types.hpp"
#include "svg_tags_elems.cpp"
class _attribs_ {
public:
using svg_types::


class _attrib { static const char c[] ="-attrib"
    std::map<_elem*, std::tuple<  std::vector<value_t*>,value_t/*with default*/  , bool/*animatable*/> values = {};  

 } ;

class _accent_height_ { static const char c[] ="accent-height";     std::vector<std::tuple<value_t/*with default*/  , bool/*animatable*/> values = {value_t::number()};  

font-face
For <font-face>, accent-height defines the distance from the origin to the top of accent characters, measured by a distance within the font coordinate system.
Value	<number>
Default value	Value of ascent
Animatable	No
};  
class _accumulate_ { static const char c[] ="accumulate" 
};   
class _additive_ { static const char c[] ="additive" }; 
class _alignment_baseline_ { static const char c[] ="alignment-baseline" };   
class _alphabetic_ { static const char c[] ="alphabetic" };     
class _amplitude_ { static const char c[] ="amplitude" };    
class _arabic_form_ { static const char c[] ="arabic-form" };    
class _ascent_ { static const char c[] ="ascent" };     
class _Name_ { static const char c[] ="Name" }; 
class _Type_ { static const char c[] ="Type" };   
class _azimuth_ { static const char c[] ="azimuth" };  
class _baseFrequency_ { static const char c[] ="baseFrequency" };    
class _baseline_shift_ { static const char c[] ="baseline-shift" };   
class _baseProfile_ { static const char c[] ="baseProfile" };    
class _bbox_ { static const char c[] ="bbox" };   
class _begin_ { static const char c[] ="begin" };    
class _bias_ { static const char c[] ="bias" }; 
class _by_ { static const char c[] ="by" };   
class _calcMode_ { static const char c[] ="calcMode" }; 
class _cap_height_ { static const char c[] ="cap-height" };     
class _class_ { static const char c[] ="class" };    
class _clip_ { static const char c[] ="clip" };   
class _clip_path_ { static const char c[] ="clip-path" };    
class _clip_rule_ { static const char c[] ="clip-rule" };    
class _clipPathUnits_ { static const char c[] ="clipPathUnits" };    
class _color_ { static const char c[] ="color" };    
class _color_interpolation_ { static const char c[] ="color-interpolation" };  
class _color_interpolation_filters_ { static const char c[] ="color-interpolation_filters" };  
class _cursor_ { static const char c[] ="cursor" };   
class _cx_ { static const char c[] ="cx" };   
class _cy_ { static const char c[] ="cy" };   
class _d_ { static const char c[] ="d" }; 
class _datap_ { static const char c[] ="datap" };  // data-*
class _decoding_ { static const char c[] ="decoding" };  
class _descent_ { static const char c[] ="descent" };   
class _diffuseConstant_ { static const char c[] ="diffuseConstant" };  
class _direction_ { static const char c[] ="direction" };  
class _display_ { static const char c[] ="display" };  
class _divisor_ { static const char c[] ="divisor" };  
class _dominant_baseline_ { static const char c[] ="dominant-baseline" };  
class _dur_ { static const char c[] ="dur" };  
class _dx_ { static const char c[] ="dx" };  
class _dy_ { static const char c[] ="dy" };  
class _edgeMode_ { static const char c[] ="edgeMode" };  
class _elevation_ { static const char c[] ="elevation" };  
class _end_ { static const char c[] ="end" };  
class _exponent_ { static const char c[] ="exponent" };  
class _fill_ { static const char c[] ="fill" };  
class _fill_opacity_ { static const char c[] ="fill-opacity" };  
class _fill_rule_ { static const char c[] ="fill-rule" };  
class _filter_ { static const char c[] ="filter" };  
class _filterUnits_ { static const char c[] ="filterUnits" };  
class _flood_color_ { static const char c[] ="flood-color" };  
class _flood_opacity_ { static const char c[] ="flood-opacity" };  
class _font_family_ { static const char c[] ="font-family" };  
class _font_size_ { static const char c[] ="font-size" };  
class _font_size_adjust_ { static const char c[] ="font-size_adjust" };  
class _font_stretch_ { static const char c[] ="font-stretch" };  
class _font_style_ { static const char c[] ="font-style" };  
class _font_variant_ { static const char c[] ="font-variant" };  
class _font_weight_ { static const char c[] ="font-weight" };  
class _fr_ { static const char c[] ="fr" };  
class _from_ { static const char c[] ="from" };  
class _fx_ { static const char c[] ="fx" };  
class _fy_ { static const char c[] ="fy" };  
class _g1_ { static const char c[] ="g1" };   
class _g2_ { static const char c[] ="g2" };   
class _glyph_name_ { static const char c[] ="glyph-name" };   
class _glyph_orientation_horizontal_ { static const char c[] ="glyph-orientation_horizontal" };   
class _glyph_orientation_vertical_ { static const char c[] ="glyph-orientation_vertical" };   
class _gradientTransform_ { static const char c[] ="gradientTransform" };  
class _gradientUnits_ { static const char c[] ="gradientUnits" };  
class _hanging_ { static const char c[] ="hanging" };   
class _height_ { static const char c[] ="height" };  
class _horiz_adv_x_ { static const char c[] ="horiz-adv_x" };   
class _horiz_origin_x_ { static const char c[] ="horiz-origin_x" };   
class _horiz_origin_y_ { static const char c[] ="horiz-origin_y" };   
class _href_ { static const char c[] ="href" };  
class _id_ { static const char c[] ="id" };  
class _ideographic_ { static const char c[] ="ideographic" };   
class _image_rendering_ { static const char c[] ="image-rendering" };  
class _in_ { static const char c[] ="in" };  
class _in2_ { static const char c[] ="in2" };  
class _intercept_ { static const char c[] ="intercept" };  
class _k_ { static const char c[] ="k" };   
class _k1_ { static const char c[] ="k1" };  
class _k2_ { static const char c[] ="k2" };  
class _k3_ { static const char c[] ="k3" };  
class _k4_ { static const char c[] ="k4" };  
class _kernelMatrix_ { static const char c[] ="kernelMatrix" };  
class _kernelUnitLength_ { static const char c[] ="kernelUnitLength" };  
class _keyPoints_ { static const char c[] ="keyPoints" };  
class _keySplines_ { static const char c[] ="keySplines" };  
class _keyTimes_ { static const char c[] ="keyTimes" };  
class _lang_ { static const char c[] ="lang" };  
class _lengthAdjust_ { static const char c[] ="lengthAdjust" };  
class _letter_spacing_ { static const char c[] ="letter-spacing" };  
class _lighting_color_ { static const char c[] ="lighting-color" };  
class _limitingConeAngle_ { static const char c[] ="limitingConeAngle" };  
class _marker_end_ { static const char c[] ="marker-end" };  
class _marker_mid_ { static const char c[] ="marker-mid" };  
class _marker_start_ { static const char c[] ="marker-start" };  
class _markerHeight_ { static const char c[] ="markerHeight" };  
class _markerUnits_ { static const char c[] ="markerUnits" };  
class _markerWidth_ { static const char c[] ="markerWidth" };  
class _mask_ { static const char c[] ="mask" };  
class _maskContentUnits_ { static const char c[] ="maskContentUnits" };  
class _maskUnits_ { static const char c[] ="maskUnits" };  
class _mathematical_ { static const char c[] ="mathematical" };   
class _max_ { static const char c[] ="max" };  
class _media_ { static const char c[] ="media" };  
class _methodExperimental_ { static const char c[] ="methodExperimental" };  
class _min_ { static const char c[] ="min" };  
class _mode_ { static const char c[] ="mode" };  
class _name_ { static const char c[] ="name" };   
class _numOctaves_ { static const char c[] ="numOctaves" };  
class _opacity_ { static const char c[] ="opacity" };  
class _opera_tor_ { static const char c[] ="opera-tor" };  
class _order_ { static const char c[] ="order" };  
class _orient_ { static const char c[] ="orient" };  
class _orientation_ { static const char c[] ="orientation" };   
class _origin_ { static const char c[] ="origin" };  
class _overflow_ { static const char c[] ="overflow" };  
class _overline_position_ { static const char c[] ="overline-position" };  
class _overline_thickness_ { static const char c[] ="overline-thickness" };  
class _paint_order_ { static const char c[] ="paint-order" };  
class _panose_1_ { static const char c[] ="panose-1" };   
class _path_ { static const char c[] ="path" };  
class _pathLength_ { static const char c[] ="pathLength" };  
class _patternContentUnits_ { static const char c[] ="patternContentUnits" };  
class _patternTransform_ { static const char c[] ="patternTransform" };  
class _patternUnits_ { static const char c[] ="patternUnits" };  
class _pointer_events_ { static const char c[] ="pointer-events" };  
class _points_ { static const char c[] ="points" };  
class _pointsAtX_ { static const char c[] ="pointsAtX" };  
class _pointsAtY_ { static const char c[] ="pointsAtY" };  
class _pointsAtZ_ { static const char c[] ="pointsAtZ" };  
class _preserveAlpha_ { static const char c[] ="preserveAlpha" };  
class _preserveAspectRatio_ { static const char c[] ="preserveAspectRatio" };  
class _primitiveUnits_ { static const char c[] ="primitiveUnits" };  
class _r_ { static const char c[] ="r" };  
class _radius_ { static const char c[] ="radius" };  
class _refX_ { static const char c[] ="refX" };  
class _refY_ { static const char c[] ="refY" };  
class _repeatCount_ { static const char c[] ="repeatCount" };  
class _repeatDur_ { static const char c[] ="repeatDur" };  
class _requiredFeatures_ { static const char c[] ="requiredFeatures" };   
class _restart_ { static const char c[] ="restart" };  
class _result_ { static const char c[] ="result" };  
class _rotateExperimental_ { static const char c[] ="rotateExperimental" };  
class _rx_ { static const char c[] ="rx" };  
class _ry_ { static const char c[] ="ry" };  
class _scale_ { static const char c[] ="scale" };  
class _seed_ { static const char c[] ="seed" };  
class _shape_rendering_ { static const char c[] ="shape-rendering" };  
class _sideExperimental_ { static const char c[] ="sideExperimental" };  
class _slope_ { static const char c[] ="slope" };  
class _spacing_ { static const char c[] ="spacing" };  
class _specularConstant_ { static const char c[] ="specularConstant" };  
class _specularExponent_ { static const char c[] ="specularExponent" };  
class _spreadMethod_ { static const char c[] ="spreadMethod" };  
class _star_toffset_ { static const char c[] ="star-toffset" };  
class _stdDeviation_ { static const char c[] ="stdDeviation" };  
class _stemh_ { static const char c[] ="stemh" };   
class _stemv_ { static const char c[] ="stemv" };   
class _stitchTiles_ { static const char c[] ="stitchTiles" };  
class _s_top_color_ { static const char c[] ="s-top_color" };  
class _s_top_opacity_ { static const char c[] ="s-top_opacity" };  
class _strikethrough_position_ { static const char c[] ="strikethrough-position" };  
class _strikethrough_thickness_ { static const char c[] ="strikethrough-thickness" };  
class _string_ { static const char c[] ="string" };   
class _stroke_ { static const char c[] ="stroke" };  
class _stroke_dasharray_ { static const char c[] ="stroke-dasharray" };  
class _stroke_dashoffset_ { static const char c[] ="stroke-dashoffset" };  
class _stroke_linecap_ { static const char c[] ="stroke-linecap" };  
class _stroke_linejoin_ { static const char c[] ="stroke-linejoin" };  
class _stroke_miterlimit_ { static const char c[] ="stroke-miterlimit" };  
class _stroke_opacity_ { static const char c[] ="stroke-opacity" };  
class _stroke_width_ { static const char c[] ="stroke-width" };  
class _style_ { static const char c[] ="style" };  
class _surfaceScale_ { static const char c[] ="surfaceScale" };  
class _SVG_ { static const char c[] ="SVG" };  
class _systemLanguage_ { static const char c[] ="systemLanguage" };  
class _tabindex_ { static const char c[] ="tabindex" };  
class _tableValues_ { static const char c[] ="tableValues" };  
class _target_ { static const char c[] ="target" };  
class _targetX_ { static const char c[] ="targetX" };  
class _targetY_ { static const char c[] ="targetY" };  
class _text_anchor_ { static const char c[] ="text-anchor" };  
class _text_decoration_ { static const char c[] ="text-decoration" };  
class _text_rendering_ { static const char c[] ="text-rendering" };  
class _textLength_ { static const char c[] ="textLength" };  
class __to_ { static const char c[] ="-to" };  
class _transform_ { static const char c[] ="transform" };  
class _transform_origin_ { static const char c[] ="transform-origin" };  
class _type_ { static const char c[] ="type" };  
class _u1_ { static const char c[] ="u1" };   
class _u2_ { static const char c[] ="u2" };   
class _underline_position_ { static const char c[] ="underline-position" };  
class _underline_thickness_ { static const char c[] ="underline-thickness" };  
class _unicode_ { static const char c[] ="unicode" };   
class _unicode_bidi_ { static const char c[] ="unicode-bidi" };  
class _unicode_range_ { static const char c[] ="unicode-range" };   
class _units_per_em_ { static const char c[] ="units-per_em" };   
class _v_alphabetic_ { static const char c[] ="v-alphabetic" };   // v-alphabetic
class _v_hanging_ { static const char c[] ="v-hanging" };   // v-alphabetic
class _v_ideographic_ { static const char c[] ="v-ideographic" };  // v-alphabetic 
class _v_mathematical_ { static const char c[] ="v-mathematical" }; // v-alphabetic  
class _values_ { static const char c[] ="values" };  
class _vec_tor_effect_ { static const char c[] ="vec-tor_effect" };  
class _version_ { static const char c[] ="version" };   
class _vert_adv_y_ { static const char c[] ="vert-adv_y" };   
class _vert_origin_x_ { static const char c[] ="vert-origin_x" };   
class _vert_origin_y_ { static const char c[] ="vert-origin_y" };   
class _viewBox_ { static const char c[] ="viewBox" };  
class _visibility_ { static const char c[] ="visibility" };  
class _width_ { static const char c[] ="width" };  
class _widths_ { static const char c[] ="widths" };   
class _word_spacing_ { static const char c[] ="word-spacing" };  
class _writing_mode_ { static const char c[] ="writing-mode" };  
class _x_ { static const char c[] ="x" };  
class _x_height_ { static const char c[] ="x-height" };   
class _x1_ { static const char c[] ="x1" };  
class _x2_ { static const char c[] ="x2" };  
class _xChannelSelector_ { static const char c[] ="xChannelSelector" };  
class _xlink_arcrole_ { static const char c[] ="xlink:arcrole" };   //xlink:arcrole   
class _xlink_href_ { static const char c[] ="xlink:href" };   //xlink:href   
class _xlink_show_ { static const char c[] ="xlink:show" };   //xlink:show   
class _xlink_title_ { static const char c[] ="xlink:title" };   //xlink:title   
class _xlink_type_ { static const char c[] ="xlink:type" };   //xlink:type   
class _xml_lang_ { static const char c[] ="xml:lang" };   //xml:lang   
class _xml_space_ { static const char c[] ="xml:space" };   //xml:space   
class _y_ { static const char c[] ="y" };  
class _y1_ { static const char c[] ="y1" };  
class _y2_ { static const char c[] ="y2" };  
class _yChannelSelector_ { static const char c[] ="yChannelSelector" };  
class _z_ { static const char c[] ="z" };  
class _zoomAndPan_ { static const char c[] ="zoomAndPan" };   

_accent_height_ _accent_height;_accumulate_ _accumulate;_additive_ _additive;_alignment_baseline_ _alignment_baseline;_alphabetic_ _alphabetic;_amplitude_ _amplitude;_arabic_form_ _arabic_form;_ascent_ _ascent;_Name_ _Name;_Type_ _Type;_azimuth_ _azimuth;_baseFrequency_ _baseFrequency;_baseline_shift_ _baseline_shift;_baseProfile_ _baseProfile;_bbox_ _bbox;_begin_ _begin;_bias_ _bias;_by_ _by;_calcMode_ _calcMode;_cap_height_ _cap_height;_class_ _class;_clip_ _clip;_clip_path_ _clip_path;_clip_rule_ _clip_rule;_clipPathUnits_ _clipPathUnits;_color_ _color;_color_interpolation_ _color_interpolation;_color_interpolation_filters_ _color_interpolation_filters;_cursor_ _cursor;_cx_ _cx;_cy_ _cy;_d_ _d;_datap_ _datap;_decoding_ _decoding;_descent_ _descent;_diffuseConstant_ _diffuseConstant;_direction_ _direction;_display_ _display;_divisor_ _divisor;_dominant_baseline_ _dominant_baseline;_dur_ _dur;_dx_ _dx;_dy_ _dy;_edgeMode_ _edgeMode;_elevation_ _elevation;_end_ _end;_exponent_ _exponent;_fill_ _fill;_fill_opacity_ _fill_opacity;_fill_rule_ _fill_rule;_filter_ _filter;_filterUnits_ _filterUnits;_flood_color_ _flood_color;_flood_opacity_ _flood_opacity;_font_family_ _font_family;_font_size_ _font_size;_font_size_adjust_ _font_size_adjust;_font_stretch_ _font_stretch;_font_style_ _font_style;_font_variant_ _font_variant;_font_weight_ _font_weight;_fr_ _fr;_from_ _from;_fx_ _fx;_fy_ _fy;_g1_ _g1;_g2_ _g2;_glyph_name_ _glyph_name;_glyph_orientation_horizontal_ _glyph_orientation_horizontal;_glyph_orientation_vertical_ _glyph_orientation_vertical;_gradientTransform_ _gradientTransform;_gradientUnits_ _gradientUnits;_hanging_ _hanging;_height_ _height;_horiz_adv_x_ _horiz_adv_x;_horiz_origin_x_ _horiz_origin_x;_horiz_origin_y_ _horiz_origin_y;_href_ _href;_id_ _id;_ideographic_ _ideographic;_image_rendering_ _image_rendering;_in_ _in;_in2_ _in2;_intercept_ _intercept;_k_ _k;_k1_ _k1;_k2_ _k2;_k3_ _k3;_k4_ _k4;_kernelMatrix_ _kernelMatrix;_kernelUnitLength_ _kernelUnitLength;_keyPoints_ _keyPoints;_keySplines_ _keySplines;_keyTimes_ _keyTimes;_lang_ _lang;_lengthAdjust_ _lengthAdjust;_letter_spacing_ _letter_spacing;_lighting_color_ _lighting_color;_limitingConeAngle_ _limitingConeAngle;_marker_end_ _marker_end;_marker_mid_ _marker_mid;_marker_start_ _marker_start;_markerHeight_ _markerHeight;_markerUnits_ _markerUnits;_markerWidth_ _markerWidth;_mask_ _mask;_maskContentUnits_ _maskContentUnits;_maskUnits_ _maskUnits;_mathematical_ _mathematical;_max_ _max;_media_ _media;_methodExperimental_ _methodExperimental;_min_ _min;_mode_ _mode;_name_ _name;_numOctaves_ _numOctaves;_opacity_ _opacity;_opera_tor_ _opera_tor;_order_ _order;_orient_ _orient;_orientation_ _orientation;_origin_ _origin;_overflow_ _overflow;_overline_position_ _overline_position;_overline_thickness_ _overline_thickness;_paint_order_ _paint_order;_panose_1_ _panose_1;_path_ _path;_pathLength_ _pathLength;_patternContentUnits_ _patternContentUnits;_patternTransform_ _patternTransform;_patternUnits_ _patternUnits;_pointer_events_ _pointer_events;_points_ _points;_pointsAtX_ _pointsAtX;_pointsAtY_ _pointsAtY;_pointsAtZ_ _pointsAtZ;_preserveAlpha_ _preserveAlpha;_preserveAspectRatio_ _preserveAspectRatio;_primitiveUnits_ _primitiveUnits;_r_ _r;_radius_ _radius;_refX_ _refX;_refY_ _refY;_repeatCount_ _repeatCount;_repeatDur_ _repeatDur;_requiredFeatures_ _requiredFeatures;_restart_ _restart;_result_ _result;_rotateExperimental_ _rotateExperimental;_rx_ _rx;_ry_ _ry;_scale_ _scale;_seed_ _seed;_shape_rendering_ _shape_rendering;_sideExperimental_ _sideExperimental;_slope_ _slope;_spacing_ _spacing;_specularConstant_ _specularConstant;_specularExponent_ _specularExponent;_spreadMethod_ _spreadMethod;_star_toffset_ _star_toffset;_stdDeviation_ _stdDeviation;_stemh_ _stemh;_stemv_ _stemv;_stitchTiles_ _stitchTiles;_s_top_color_ _s_top_color;_s_top_opacity_ _s_top_opacity;_strikethrough_position_ _strikethrough_position;_strikethrough_thickness_ _strikethrough_thickness;_string_ _string;_stroke_ _stroke;_stroke_dasharray_ _stroke_dasharray;_stroke_dashoffset_ _stroke_dashoffset;_stroke_linecap_ _stroke_linecap;_stroke_linejoin_ _stroke_linejoin;_stroke_miterlimit_ _stroke_miterlimit;_stroke_opacity_ _stroke_opacity;_stroke_width_ _stroke_width;_style_ _style;_surfaceScale_ _surfaceScale;_SVG_ _SVG;_systemLanguage_ _systemLanguage;_tabindex_ _tabindex;_tableValues_ _tableValues;_target_ _target;_targetX_ _targetX;_targetY_ _targetY;_text_anchor_ _text_anchor;_text_decoration_ _text_decoration;_text_rendering_ _text_rendering;_textLength_ _textLength;__to_ __to;_transform_ _transform;_transform_origin_ _transform_origin;_type_ _type;_u1_ _u1;_u2_ _u2;_underline_position_ _underline_position;_underline_thickness_ _underline_thickness;_unicode_ _unicode;_unicode_bidi_ _unicode_bidi;_unicode_range_ _unicode_range;_units_per_em_ _units_per_em;_v_alphabetic_ _v_alphabetic;_v_hanging_ _v_hanging;_v_ideographic_ _v_ideographic;_v_mathematical_ _v_mathematical;_values_ _values;_vec_tor_effect_ _vec_tor_effect;_version_ _version;_vert_adv_y_ _vert_adv_y;_vert_origin_x_ _vert_origin_x;_vert_origin_y_ _vert_origin_y;_viewBox_ _viewBox;_visibility_ _visibility;_width_ _width;_widths_ _widths;_word_spacing_ _word_spacing;_writing_mode_ _writing_mode;_x_ _x;_x_height_ _x_height;_x1_ _x1;_x2_ _x2;_xChannelSelector_ _xChannelSelector;_xlink_arcrole_ _xlink_arcrole;_xlink_href_ _xlink_href;_xlink_show_ _xlink_show;_xlink_title_ _xlink_title;_xlink_type_ _xlink_type;_xml_lang_ _xml_lang;_xml_space_ _xml_space;_y_ _y;_y1_ _y1;_y2_ _y2;_yChannelSelector_ _yChannelSelector;_z_ _z;_zoomAndPan_ _zoomAndPan;
const std::map<const char[], _attrib*  > = {{_accent_height_::c,&_accent_height}, {_accumulate_::c, &_accumulate}, {_additive_::c, &_additive}, {_alignment_baseline_::c, &_alignment_baseline}, {_alphabetic_::c, &_alphabetic}, {_amplitude_::c, &_amplitude}, {_arabic_form_::c, &_arabic_form}, {_ascent_::c, &_ascent}, {_Name_::c, &_Name}, {_Type_::c, &_Type}, {_azimuth_::c, &_azimuth}, {_baseFrequency_::c, &_baseFrequency}, {_baseline_shift_::c, &_baseline_shift}, {_baseProfile_::c, &_baseProfile}, {_bbox_::c, &_bbox}, {_begin_::c, &_begin}, {_bias_::c, &_bias}, {_by_::c, &_by}, {_calcMode_::c, &_calcMode}, {_cap_height_::c, &_cap_height}, {_class_::c, &_class}, {_clip_::c, &_clip}, {_clip_path_::c, &_clip_path}, {_clip_rule_::c, &_clip_rule}, {_clipPathUnits_::c, &_clipPathUnits}, {_color_::c, &_color}, {_color_interpolation_::c, &_color_interpolation}, {_color_interpolation_filters_::c, &_color_interpolation_filters}, {_cursor_::c, &_cursor}, {_cx_::c, &_cx}, {_cy_::c, &_cy}, {_d_::c, &_d}, {_datap_::c, &_datap}, {_decoding_::c, &_decoding}, {_descent_::c, &_descent}, {_diffuseConstant_::c, &_diffuseConstant}, {_direction_::c, &_direction}, {_display_::c, &_display}, {_divisor_::c, &_divisor}, {_dominant_baseline_::c, &_dominant_baseline}, {_dur_::c, &_dur}, {_dx_::c, &_dx}, {_dy_::c, &_dy}, {_edgeMode_::c, &_edgeMode}, {_elevation_::c, &_elevation}, {_end_::c, &_end}, {_exponent_::c, &_exponent}, {_fill_::c, &_fill}, {_fill_opacity_::c, &_fill_opacity}, {_fill_rule_::c, &_fill_rule}, {_filter_::c, &_filter}, {_filterUnits_::c, &_filterUnits}, {_flood_color_::c, &_flood_color}, {_flood_opacity_::c, &_flood_opacity}, {_font_family_::c, &_font_family}, {_font_size_::c, &_font_size}, {_font_size_adjust_::c, &_font_size_adjust}, {_font_stretch_::c, &_font_stretch}, {_font_style_::c, &_font_style}, {_font_variant_::c, &_font_variant}, {_font_weight_::c, &_font_weight}, {_fr_::c, &_fr}, {_from_::c, &_from}, {_fx_::c, &_fx}, {_fy_::c, &_fy}, {_g1_::c, &_g1}, {_g2_::c, &_g2}, {_glyph_name_::c, &_glyph_name}, {_glyph_orientation_horizontal_::c, &_glyph_orientation_horizontal}, {_glyph_orientation_vertical_::c, &_glyph_orientation_vertical}, {_gradientTransform_::c, &_gradientTransform}, {_gradientUnits_::c, &_gradientUnits}, {_hanging_::c, &_hanging}, {_height_::c, &_height}, {_horiz_adv_x_::c, &_horiz_adv_x}, {_horiz_origin_x_::c, &_horiz_origin_x}, {_horiz_origin_y_::c, &_horiz_origin_y}, {_href_::c, &_href}, {_id_::c, &_id}, {_ideographic_::c, &_ideographic}, {_image_rendering_::c, &_image_rendering}, {_in_::c, &_in}, {_in2_::c, &_in2}, {_intercept_::c, &_intercept}, {_k_::c, &_k}, {_k1_::c, &_k1}, {_k2_::c, &_k2}, {_k3_::c, &_k3}, {_k4_::c, &_k4}, {_kernelMatrix_::c, &_kernelMatrix}, {_kernelUnitLength_::c, &_kernelUnitLength}, {_keyPoints_::c, &_keyPoints}, {_keySplines_::c, &_keySplines}, {_keyTimes_::c, &_keyTimes}, {_lang_::c, &_lang}, {_lengthAdjust_::c, &_lengthAdjust}, {_letter_spacing_::c, &_letter_spacing}, {_lighting_color_::c, &_lighting_color}, {_limitingConeAngle_::c, &_limitingConeAngle}, {_marker_end_::c, &_marker_end}, {_marker_mid_::c, &_marker_mid}, {_marker_start_::c, &_marker_start}, {_markerHeight_::c, &_markerHeight}, {_markerUnits_::c, &_markerUnits}, {_markerWidth_::c, &_markerWidth}, {_mask_::c, &_mask}, {_maskContentUnits_::c, &_maskContentUnits}, {_maskUnits_::c, &_maskUnits}, {_mathematical_::c, &_mathematical}, {_max_::c, &_max}, {_media_::c, &_media}, {_methodExperimental_::c, &_methodExperimental}, {_min_::c, &_min}, {_mode_::c, &_mode}, {_name_::c, &_name}, {_numOctaves_::c, &_numOctaves}, {_opacity_::c, &_opacity}, {_opera_tor_::c, &_opera_tor}, {_order_::c, &_order}, {_orient_::c, &_orient}, {_orientation_::c, &_orientation}, {_origin_::c, &_origin}, {_overflow_::c, &_overflow}, {_overline_position_::c, &_overline_position}, {_overline_thickness_::c, &_overline_thickness}, {_paint_order_::c, &_paint_order}, {_panose_1_::c, &_panose_1}, {_path_::c, &_path}, {_pathLength_::c, &_pathLength}, {_patternContentUnits_::c, &_patternContentUnits}, {_patternTransform_::c, &_patternTransform}, {_patternUnits_::c, &_patternUnits}, {_pointer_events_::c, &_pointer_events}, {_points_::c, &_points}, {_pointsAtX_::c, &_pointsAtX}, {_pointsAtY_::c, &_pointsAtY}, {_pointsAtZ_::c, &_pointsAtZ}, {_preserveAlpha_::c, &_preserveAlpha}, {_preserveAspectRatio_::c, &_preserveAspectRatio}, {_primitiveUnits_::c, &_primitiveUnits}, {_r_::c, &_r}, {_radius_::c, &_radius}, {_refX_::c, &_refX}, {_refY_::c, &_refY}, {_repeatCount_::c, &_repeatCount}, {_repeatDur_::c, &_repeatDur}, {_requiredFeatures_::c, &_requiredFeatures}, {_restart_::c, &_restart}, {_result_::c, &_result}, {_rotateExperimental_::c, &_rotateExperimental}, {_rx_::c, &_rx}, {_ry_::c, &_ry}, {_scale_::c, &_scale}, {_seed_::c, &_seed}, {_shape_rendering_::c, &_shape_rendering}, {_sideExperimental_::c, &_sideExperimental}, {_slope_::c, &_slope}, {_spacing_::c, &_spacing}, {_specularConstant_::c, &_specularConstant}, {_specularExponent_::c, &_specularExponent}, {_spreadMethod_::c, &_spreadMethod}, {_star_toffset_::c, &_star_toffset}, {_stdDeviation_::c, &_stdDeviation}, {_stemh_::c, &_stemh}, {_stemv_::c, &_stemv}, {_stitchTiles_::c, &_stitchTiles}, {_s_top_color_::c, &_s_top_color}, {_s_top_opacity_::c, &_s_top_opacity}, {_strikethrough_position_::c, &_strikethrough_position}, {_strikethrough_thickness_::c, &_strikethrough_thickness}, {_string_::c, &_string}, {_stroke_::c, &_stroke}, {_stroke_dasharray_::c, &_stroke_dasharray}, {_stroke_dashoffset_::c, &_stroke_dashoffset}, {_stroke_linecap_::c, &_stroke_linecap}, {_stroke_linejoin_::c, &_stroke_linejoin}, {_stroke_miterlimit_::c, &_stroke_miterlimit}, {_stroke_opacity_::c, &_stroke_opacity}, {_stroke_width_::c, &_stroke_width}, {_style_::c, &_style}, {_surfaceScale_::c, &_surfaceScale}, {_SVG_::c, &_SVG}, {_systemLanguage_::c, &_systemLanguage}, {_tabindex_::c, &_tabindex}, {_tableValues_::c, &_tableValues}, {_target_::c, &_target}, {_targetX_::c, &_targetX}, {_targetY_::c, &_targetY}, {_text_anchor_::c, &_text_anchor}, {_text_decoration_::c, &_text_decoration}, {_text_rendering_::c, &_text_rendering}, {_textLength_::c, &_textLength}, {__to_::c, &__to}, {_transform_::c, &_transform}, {_transform_origin_::c, &_transform_origin}, {_type_::c, &_type}, {_u1_::c, &_u1}, {_u2_::c, &_u2}, {_underline_position_::c, &_underline_position}, {_underline_thickness_::c, &_underline_thickness}, {_unicode_::c, &_unicode}, {_unicode_bidi_::c, &_unicode_bidi}, {_unicode_range_::c, &_unicode_range}, {_units_per_em_::c, &_units_per_em}, {_v_alphabetic_::c, &_v_alphabetic}, {_v_hanging_::c, &_v_hanging}, {_v_ideographic_::c, &_v_ideographic}, {_v_mathematical_::c, &_v_mathematical}, {_values_::c, &_values}, {_vec_tor_effect_::c, &_vec_tor_effect}, {_version_::c, &_version}, {_vert_adv_y_::c, &_vert_adv_y}, {_vert_origin_x_::c, &_vert_origin_x}, {_vert_origin_y_::c, &_vert_origin_y}, {_viewBox_::c, &_viewBox}, {_visibility_::c, &_visibility}, {_width_::c, &_width}, {_widths_::c, &_widths}, {_word_spacing_::c, &_word_spacing}, {_writing_mode_::c, &_writing_mode}, {_x_::c, &_x}, {_x_height_::c, &_x_height}, {_x1_::c, &_x1}, {_x2_::c, &_x2}, {_xChannelSelector_::c, &_xChannelSelector}, {_xlink_arcrole_::c, &_xlink_arcrole}, {_xlink_href_::c, &_xlink_href}, {_xlink_show_::c, &_xlink_show}, {_xlink_title_::c, &_xlink_title}, {_xlink_type_::c, &_xlink_type}, {_xml_lang_::c, &_xml_lang}, {_xml_space_::c, &_xml_space}, {_y_::c, &_y}, {_y1_::c, &_y1}, {_y2_::c, &_y2}, {_yChannelSelector_::c, &_yChannelSelector}, {_z_::c, &_z}, {_zoomAndPan_::c, &_zoomAndPan}}; 
const std::vector<_attrib*> Core = {&_id,&_class,&_style,&_lang,&_tabindex,&_xml_lang,&_xml_space};
const std::vector<_attrib*> Conditional_processing = {&_requiredExtensions,&_requiredFeatures,&_systemLanguage}
    const std::vector<_attrib*> Generic_ = Core_ + Conditional_processing_
const std::vector<_attrib*> XLink= {&_xlink_href,&_xlink_type,/*&_xlink_role*/,&_xlink_arcrole,&_xlink_title,&_xlink_show,/*&_xlink_actuate*/};
const std::vector<_attrib*> Presentation_ = {&_alignment_baseline, &_baseline_shift, &_clip, &_clip_path, &_clip_rule, &_color, &_color_interpolation, &_color_interpolation_filters, &_color_rendering, &_cursor, &_d, &_direction, &_display, &_dominant_baseline, &_fill, &_fill_opacity, &_fill_rule, &_filter, &_flood_color, &_flood_opacity, &_font_family, &_font_size, &_font_size_adjust, &_font_stretch, &_font_style, &_font_variant, &_font_weight, &_glyph_orientation_horizontal, &_glyph_orientation_vertical, &_image_rendering, &_letter_spacing, &_lighting_color, &_marker_end, &_marker_mid, &_marker_start, &_mask, &_opacity, &_overflow, &_pointer_events, &_shape_rendering, &_stop_color, &_stop_opacity, &_stroke, &_stroke_dasharray, &_stroke_dashoffset, &_stroke_linecap, &_stroke_linejoin, &_stroke_miterlimit, &_stroke_opacity, &_stroke_width, &_text_anchor, &_text_decoration, &_text_rendering, &_transform, &_transform_origin, &_unicode_bidi, &_vector_effect, &_visibility, &_word_spacing, &_writing_mode};

const std::vector<_attrib*> Filter_primitive  = {&_height, &_result, &_width, &_x, &_y};
const std::vector<_attrib*> Transfer_function = {&_type, &_tableValues, &_slope, &_intercept, &_amplitude, &_exponent, /*&_offset*/ } ;
    const std::vector<_attrib*> Filters  = Transfer_function_ + Filter_primitive_ ;
const std::vector<_attrib*> Animation_target_element = {&_href};
const std::vector<_attrib*> Animation_attribute_target = {&_attributeType, &_attributeName};
const std::vector<_attrib*> Animation_timing = {&_begin, &_dur, &_end, &_min, &_max, &_restart, &_repeatCount, &_repeatDur, &_fill};
const std::vector<_attrib*> Animation_value = {&_calcMode, &_values, &_keyTimes, &_keySplines, &_from, &_to, &_by, &_autoReverse, &_accelerate, &_decelerate
const std::vector<_attrib*> Animation_addition = {&_additive, &_accumulate};
    const std::vector<_attrib*> Animation =Animation_target_element+Animation_attribute_target+Animation_timing+Animation_value+Animation_addition ;
 
};