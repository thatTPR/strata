#pragma once 
#include <vector>
#include <array>
#include <conditional>
using namespace std;



// Recursive pack size
    // template<typename... Args>
    // constexpr size_t pack_size() {
    //     return 0;
    // };
    // template<typename T , typename... Args>
    // constexpr size_t pack_size() {
    //     return 1 + pack_size<Args...>();
    // };

    template<typename... Args>
    constexpr size_t pack_size(){
        const auto tu = {Args...} ;
        return std::tuple_size(tu) ;
    };
template <class T, size_t size , size_t... sizes >
class vari_mat_it {
    std::array<T , 1 + pack_size<sizes...>()> > size ;
    
};
// allows creation of NxNxNxN....xN matrices ; 
template <class T ,size_t size, size_t... sizes>
class vari_mat {

    size_t sizes_s = pack_size<sizes...> + 1;
    std::array<size_t , sizes_s > sizes = {size , sizes} ; 
    std::condtional<sizes != NULL , std::array<vari_mat<T,sizes...>, size > , std::array<T , size>  >  mat ; 
    
    void fill(T v){
        for(size_t j = 0  ; j < sizes_s ; j++ ){
            for(size_t i = 0  ; i< sizes[j] ; i++){
                this.mat.fill(v) ;
            };

        }
    };
    std::array<size_t, sizes_s> begin(){
        return std::array<size_t , sizes_s > i.fill(0) ; 
    };
    std::array<size_t , sizes_s> end(){
         
        return sizes ; 
    };
    _CONSTEXPR17 typeof(this.mat)& operator[](size_t s){
        return &this.mat[s] ;
    };
    
    var_mat(){};
    
};

template <class T , size_t s1 , size_t s2>
class _mat_iterator {
      using iterator_category = random_access_iterator_tag;
    using value_type        = T;
    using difference_type   = ptrdiff_t;
    using pointer           = const T*;
    using reference         = const T&;
};

template <class T, size_t s1 , size_t s2>
class smat {
    using it = _mat_iterator
    public:
    size_t size1 = s1 ;
    size_t size2 = s2 ;
    
    std::array<std::array<T, s2> , s1 > mat; 

    size_t  size1(){
        return mat.size1 ;
    };
    size_t size2(){
        return mat.size2; 
    };
    constexpr void fill(const &T v){
        for(uint t = 0 ; t < size1 ; t++){
            for(uint j = 1 ; j<size2; j++){

            };
        }
    };
    std::array<T,s1>& operator[](smat& lhs, size_t& rhs){
        return &lhs.mat[rhs] ;
    };
    T& operator[](std::array<T,s2>& lhs , size_t&  rhs ){
        return &lhs[rhs] ; 
    };
    
    smat(std::array<>)

        
};

class dmat_iterator {

};
template <class T >
class sdmat {
    public:
    size_t s1 ;
    size_t s2 ;    
    std::vector<std::array<T > mat; 
    uint  size1(){
        return this.s1 ;
    };
    uint size2(){
        return this.s2; 
    };
    void addRow(){

    };
    
    &T operator[](smat& lhs, size_t& rhs){
        return &lhs.mat[rhs] ;
    };
    &T operator[](std::vector<T>& lhs , size_t&  rhs ){
        return &lhs[rhs] ; 
    };
    smat( ){
        
    };        
};