#pragma once
#ifndef _BIMAP_
#define _BIMAP_

#include <unordered_map>

template <typename KeyType, typename ValueType, typename KeyCompare = std::equal_to<KeyType>, typename ValueCompare = std::equal_to<ValueType>, typename Allocator = std::allocator<std::pair<const KeyType, ValueType>>>
class bimap {
public:
    using key_type = KeyType;
    using mapped_type = ValueType;
    using key_compare = KeyCompare;
    using value_compare = ValueCompare;
    using allocator_type = Allocator;
    using value_type = std::pair<const KeyType, ValueType>;
    using reference = value_type&;
    using const_reference = const value_type&;
    using pointer = typename std::allocator_traits<Allocator>::pointer;
    using const_pointer = typename std::allocator_traits<Allocator>::const_pointer;

private:
    using ForwardMapType = std::unordered_map<KeyType, ValueType, KeyCompare, Allocator>;
    using ReverseMapType = std::unordered_multimap<const ValueType*, const KeyType*, std::hash<const ValueType*>, std::equal_to<const ValueType*>, Allocator>;
    ForwardMapType forwardMap;
    ReverseMapType reverseMap;
public:
    bimap() = default;

    // Constructor for literal key and value declarations
    bimap(const KeyType& key, const ValueType& value) {
        insert(key, value);
    }

     void insert(const KeyType& key, const ValueType& value) {
        forwardMap[key] = value;
        reverseMap[&value] = &key;
    }
    BiMap& operator=(const std::unordered_map<KeyType , ValueType> lit){
        if(forwardMap != lit){
            reverseMap.clear();
            forwardMap.clear();
            forwardMap= lit ;
            for (const auto& pair : forwardMap) {
                reverseMap[&(pair.second)] = &(pair.first);
            };
        }
    };
     BiMap& operator=(const BiMap& other) {
        if (this != &other) {
            forwardMap = other.forwardMap;
            reverseMap.clear();

            // Rebuild the reverseMap based on the updated forwardMap
            for (const auto& pair : forwardMap) {
                reverseMap[&(pair.second)] = &(pair.first);
            }
        }
        return *this;
    }
    ValueType& operator[](const KeyType& key) {
        auto it = forwardMap.find(key);
        if (it != forwardMap.end()) {
            return it->second;
        }
        // If the key does not exist, create a new entry in both maps
        ValueType defaultConstructedValue{};
        insert(key, defaultConstructedValue);
        return forwardMap[key];
    }

    KeyType& operator()(const ValueType& value) {
        auto it = reverseMap.find(&value);
        if (it != reverseMap.end()) {
            return *(it->second);
        }
        // If the value does not exist, create a new entry in both maps
        KeyType defaultConstructedKey{};
        insert(defaultConstructedKey, value);
        return reverseMap[&value];
    }
    

    bool getByKey(const KeyType& key, ValueType& value) const {
        auto it = forwardMap.find(key);
        if (it != forwardMap.end()) {
            value = it->second;
            return true;
        }
        return false;
    }

    bool getByValue(const ValueType& value, KeyType& key) const {
        auto it = reverseMap.find(&value);
        if (it != reverseMap.end()) {
            key = *(it->second);
            return true;
        }
        return false;
    }

    find()

    // Iterator support
    typename ForwardMapType::iterator begin() {
        return forwardMap.begin();
    }

    typename ForwardMapType::iterator end() {
        return forwardMap.end();
    }

    typename ForwardMapType::const_iterator begin() const {
        return forwardMap.begin();
    }

    typename ForwardMapType::const_iterator end() const {
        return forwardMap.end();
    }

    // Other functions...
};




#endif
